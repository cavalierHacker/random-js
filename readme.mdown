random-js
=========

A fairly close port of the Python Standard Library’s random module ([docs][pyranddocs], [source][pyrandsource]), but using a fairly simple Multiply With Carry + XOR-shift PRNG, instead of the Mersenne Twister that Python uses by default. This PRNG should be suitable for most Monte Carlo simulations likely to run in a browser, or for purposes like procedural art. A slower but higher quality PRNG is also provided in the HighQualityRandom class. Only a few methods need be overridden to add a custom PRNG, if this still doesn’t do the trick.

  [pyranddocs]: http://docs.python.org/py3k/library/random.html
  [pyrandsource]: http://hg.python.org/cpython/file/tip/Lib/random.py

Like the Python version, this module provides useful functions for dealing both with choosing integers/array items, and for generating random numbers following several common statistical distributions.

```coffeescript
random = new require('random-py').Random
```

Set the PRNG’s seed, so that the precise sequence of numbers can be regenerated. When the class is first constructed, the PRNG is seeded with `+new Date`
```coffeescript
random.seed(12345)
```

choose a floating point number in the range [0, 1)
```coffeescript
random.random()
```

choose a floating point number in the range [1.5, 10)
```coffeescript
random.uniform(1.5, 10)
```

choose an integer N in the range 2 <= N < 50, by 2
```coffeescript
random.randrange(2, 50, 2)
```

or choose an integer N in the range 0 <= N < 45
```coffeescript
random.randrange(45)
```

choose an integer N in the range 5 <= N <= 18, endpoint included
```coffeescript
random.randint(5, 18)
```

randomly choose an element of an array
```coffeescript
array = 'abcdefg'.split('')
random.choice(array)
```

```coffeescript
choose 4 elements from the array, ordered, chosen without replacement
random.sample(array, 4)
```

randomly shuffle the array, in place
```coffeescript
random.shuffle(array)
```

choose a random number from the standard normal distribution
```coffeescript
random.gauss()
```

choose a random number from the normal distribution with mean 5 and standard deviation 5
```coffeescript
random.gauss(5, 5)
```

choose from the triangular distribution on range [10, 20) with mode (peak) 18
```coffeescript
random.triangular(10, 20, 18)
```

choose from the triangular distribution on range [0, 1) with mode 0.5
```coffeescript
random.triangular()
```

choose from the log normal distribution. the log of this distribution is the normal distibution with mean 5 and standard deviation 5
```coffeescript
random.lognormvariate(5, 5)
```

choose from the Von Mises distribution, an analog of the normal distribution wrapped around a circle, with mean angle pi, and concentration parameter pi/2
```coffeescript
random.vonmisesvariate(Math.PI, Math.PI/2)
```

other distributions:

  - expovariate
  - gammavariate
  - betavariate
  - paretovariate
  - weibullvariate

it’s possible to save and restore the state of the PRNG, allowing the same set of random numbers to be generated in the same order:
```coffeescript
some_state = random.getstate()

for i in [0...1000]
    random.random()

random.setstate(some_state)
```

* * * * *

If the built-in PRNG doesn’t meet your needs, it is easy to override with your own PRNG. But this module also ships with a couple of alternatives.

```coffeescript
{BaseRandom, BuiltinRandom, HighQualityRandom} = require('random-py')
```

First, `BuiltinRandom` generates random floats approximately 10 times as fast as Random. It calls the built-in `Math.random` function twice to construct each random float with a full 52 bits of entropy. Unfortunately, typical JavaScript engines have PRNGs with rather poor performance on statistical tests of randomness, and this class also does not allow for setting a seed, or saving/restoring state.

```coffeescript
random = new BuiltinRandom
```


The other PRNG provided has a much longer period and should pass more rigorous statistical tests, at the cost of running roughly 8–10 times slower:

```coffeescript
random = new HighQualityRandom
```

It is also quite straight-forward to implement a better custom PRNG:
```coffeescript

class XKCDRandom extends BaseRandom
    # http://xkcd.com/221/
    _randint32: -> 4
    seed: (j) -> # ignore j
    _getstate: ->
    _setstate: ->

class DilbertRandom extends BaseRandom
    # http://xkcd.com/221/
    _randint32: -> 9
    seed: (j) -> # ignore j
    _getstate: ->
    _setstate: ->
```

[![Random Number](http://imgs.xkcd.com/comics/random_number.png)](http://xkcd.com/221/)
[![Tour of Accounting](http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/00000/2000/300/2318/2318.strip.gif)](http://dilbert.com/fast/2001-10-25/)