random-js
=========

A fairly close port of the Python Standard Library’s random module ([docs][pyranddocs], [source][pyrandsource]), but using a fairly simple Multiply With Carry + XOR-shift PRNG, instead of the Mersenne Twister that Python uses by default. This PRNG should be suitable for most Monte Carlo simulations likely to run in a browser, or for purposes like procedural art. A slower but higher quality PRNG is also provided in the HighQualityRandom class. Only a few methods need be overridden to add a custom PRNG, if this still doesn’t do the trick.

  [pyranddocs]: http://docs.python.org/py3k/library/random.html
  [pyrandsource]: http://hg.python.org/cpython/file/tip/Lib/random.py

Like the Python version, this module provides useful functions for dealing both with choosing integers/array items, and for generating random numbers following several common statistical distributions.

```coffeescript
random = new require('random-py').Random

# set the PRNG’s seed, so that the precise sequence of numbers can be
# regenerated. When the class is first constructed, the PRNG is seeded
# with `+new Date`
random.seed(12345)

# choose a floating point number in the range [0, 1)
random.random()

# choose a floating point number in the range [1.5, 10)
random.uniform(1.5, 10)

# choose an integer N in the range 2 <= N < 50, by 2
random.randrange(2, 50, 2)

# or choose an integer N in the range 0 <= N < 45
random.randrange(45)

# choose an integer N in the range 5 <= N <= 18, endpoint included
random.randint(5, 18)

# randomly choose an element of an array
array = 'abcdefg'.split('')
random.choice(array)

# choose 4 elements from the array, ordered, chosen without replacement
random.sample(array, 4)

# randomly shuffle the array, in place
random.shuffle(array)

# choose a random number from the standard normal distribution
random.gauss()

# choose a random number from the normal distribution with mean 5 and
# standard deviation 5
random.gauss(5, 5)

# choose from the triangular distribution on range [10, 20) with
# mode (peak) 18
random.triangular(10, 20, 18)

# choose from the triangular distribution on range [0, 1) with mode 0.5
random.triangular()

# choose from the log normal distribution. the log of this distribution
# is the normal distibution with mean 5 and standard deviation 5
random.lognormvariate(5, 5)

# choose from the Von Mises distribution, an analog of the normal distribution
# wrapped around a circle, with mean angle pi, and concentration parameter pi/2
random.vonmisesvariate(Math.PI, Math.PI/2)

# other distributions:
#   - expovariate
#   - gammavariate
#   - betavariate
#   - paretovariate
#   - weibullvariate

# it’s possible to save and restore the state of the PRNG, allowing the same
# set of random numbers to be generated in the same order:

some_state = random.getstate()

for i in [0...1000]
    random.random()

random.setstate(some_state)

# It is quite straight-forward to implement a better PRNG:

class XKCDRandom extends BaseRandom
    # http://xkcd.com/221/
    _randint32: -> 4
    seed: ->
    _getstate: ->
    _setstate: ->
```

![Random Number](http://xkcd.com/221/)